// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ShipContract__SpaceShipsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getShipType(): BigInt {
    return this.value0;
  }

  getAttack(): BigInt {
    return this.value1;
  }

  getHealth(): BigInt {
    return this.value2;
  }

  getCargo(): BigInt {
    return this.value3;
  }

  getCraftTime(): BigInt {
    return this.value4;
  }

  getCraftedFrom(): BigInt {
    return this.value5;
  }

  getName(): string {
    return this.value6;
  }

  getModuleSlots(): BigInt {
    return this.value7;
  }
}

export class ShipContract__getShipStatsResultValue0Struct extends ethereum.Tuple {
  get shipType(): BigInt {
    return this[0].toBigInt();
  }

  get price(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get attack(): BigInt {
    return this[2].toBigInt();
  }

  get attackTypes(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get defenseTypes(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get health(): BigInt {
    return this[5].toBigInt();
  }

  get cargo(): BigInt {
    return this[6].toBigInt();
  }

  get craftTime(): BigInt {
    return this[7].toBigInt();
  }

  get craftedFrom(): BigInt {
    return this[8].toBigInt();
  }

  get name(): string {
    return this[9].toString();
  }

  get moduleSlots(): BigInt {
    return this[10].toBigInt();
  }
}

export class ShipContract__shipModuleTypeResult {
  value0: string;
  value1: BigInt;

  constructor(value0: string, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getHealthBoostStat(): BigInt {
    return this.value1;
  }
}

export class ShipContract__shipTypeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getShipType(): BigInt {
    return this.value0;
  }

  getAttack(): BigInt {
    return this.value1;
  }

  getHealth(): BigInt {
    return this.value2;
  }

  getCargo(): BigInt {
    return this.value3;
  }

  getCraftTime(): BigInt {
    return this.value4;
  }

  getCraftedFrom(): BigInt {
    return this.value5;
  }

  getName(): string {
    return this.value6;
  }

  getModuleSlots(): BigInt {
    return this.value7;
  }
}

export class ShipContract extends ethereum.SmartContract {
  static bind(address: Address): ShipContract {
    return new ShipContract("ShipContract", address);
  }

  SpaceShips(param0: BigInt): ShipContract__SpaceShipsResult {
    let result = super.call(
      "SpaceShips",
      "SpaceShips(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ShipContract__SpaceShipsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toBigInt()
    );
  }

  try_SpaceShips(
    param0: BigInt
  ): ethereum.CallResult<ShipContract__SpaceShipsResult> {
    let result = super.tryCall(
      "SpaceShips",
      "SpaceShips(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShipContract__SpaceShipsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toBigInt()
      )
    );
  }

  assignedPlanet(param0: BigInt): BigInt {
    let result = super.call(
      "assignedPlanet",
      "assignedPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_assignedPlanet(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignedPlanet",
      "assignedPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAssignedPlanet(_shipId: BigInt): BigInt {
    let result = super.call(
      "checkAssignedPlanet",
      "checkAssignedPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shipId)]
    );

    return result[0].toBigInt();
  }

  try_checkAssignedPlanet(_shipId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkAssignedPlanet",
      "checkAssignedPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_shipId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameDiamond(): Address {
    let result = super.call("gameDiamond", "gameDiamond():(address)", []);

    return result[0].toAddress();
  }

  try_gameDiamond(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameDiamond", "gameDiamond():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCargo(_fleetId: BigInt): BigInt {
    let result = super.call("getCargo", "getCargo(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_fleetId)
    ]);

    return result[0].toBigInt();
  }

  try_getCargo(_fleetId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCargo", "getCargo(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_fleetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCraftTime(_fleetId: BigInt): BigInt {
    let result = super.call("getCraftTime", "getCraftTime(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_fleetId)
    ]);

    return result[0].toBigInt();
  }

  try_getCraftTime(_fleetId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCraftTime",
      "getCraftTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_fleetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCraftedFrom(_fleetId: BigInt): BigInt {
    let result = super.call(
      "getCraftedFrom",
      "getCraftedFrom(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_fleetId)]
    );

    return result[0].toBigInt();
  }

  try_getCraftedFrom(_fleetId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCraftedFrom",
      "getCraftedFrom(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_fleetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefensePlanet(_planetId: BigInt): Array<BigInt> {
    let result = super.call(
      "getDefensePlanet",
      "getDefensePlanet(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_planetId)]
    );

    return result[0].toBigIntArray();
  }

  try_getDefensePlanet(_planetId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getDefensePlanet",
      "getDefensePlanet(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_planetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrice(_fleetId: BigInt): Array<BigInt> {
    let result = super.call("getPrice", "getPrice(uint256):(uint256[4])", [
      ethereum.Value.fromUnsignedBigInt(_fleetId)
    ]);

    return result[0].toBigIntArray();
  }

  try_getPrice(_fleetId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getPrice", "getPrice(uint256):(uint256[4])", [
      ethereum.Value.fromUnsignedBigInt(_fleetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getShipStats(_shipId: BigInt): ShipContract__getShipStatsResultValue0Struct {
    let result = super.call(
      "getShipStats",
      "getShipStats(uint256):((uint256,uint256[4],uint256,uint256[3],uint256[3],uint256,uint256,uint256,uint256,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_shipId)]
    );

    return changetype<ShipContract__getShipStatsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getShipStats(
    _shipId: BigInt
  ): ethereum.CallResult<ShipContract__getShipStatsResultValue0Struct> {
    let result = super.tryCall(
      "getShipStats",
      "getShipStats(uint256):((uint256,uint256[4],uint256,uint256[3],uint256[3],uint256,uint256,uint256,uint256,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_shipId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ShipContract__getShipStatsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(_account: Address, _shipTypeId: BigInt): BigInt {
    let result = super.call("mint", "mint(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_account),
      ethereum.Value.fromUnsignedBigInt(_shipTypeId)
    ]);

    return result[0].toBigInt();
  }

  try_mint(
    _account: Address,
    _shipTypeId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_account),
      ethereum.Value.fromUnsignedBigInt(_shipTypeId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shipModuleType(param0: BigInt): ShipContract__shipModuleTypeResult {
    let result = super.call(
      "shipModuleType",
      "shipModuleType(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ShipContract__shipModuleTypeResult(
      result[0].toString(),
      result[1].toBigInt()
    );
  }

  try_shipModuleType(
    param0: BigInt
  ): ethereum.CallResult<ShipContract__shipModuleTypeResult> {
    let result = super.tryCall(
      "shipModuleType",
      "shipModuleType(uint256):(string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShipContract__shipModuleTypeResult(
        value[0].toString(),
        value[1].toBigInt()
      )
    );
  }

  shipType(param0: BigInt): ShipContract__shipTypeResult {
    let result = super.call(
      "shipType",
      "shipType(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ShipContract__shipTypeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toBigInt()
    );
  }

  try_shipType(
    param0: BigInt
  ): ethereum.CallResult<ShipContract__shipTypeResult> {
    let result = super.tryCall(
      "shipType",
      "shipType(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ShipContract__shipTypeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddShipTypeCall extends ethereum.Call {
  get inputs(): AddShipTypeCall__Inputs {
    return new AddShipTypeCall__Inputs(this);
  }

  get outputs(): AddShipTypeCall__Outputs {
    return new AddShipTypeCall__Outputs(this);
  }
}

export class AddShipTypeCall__Inputs {
  _call: AddShipTypeCall;

  constructor(call: AddShipTypeCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newShipType(): AddShipTypeCall_newShipTypeStruct {
    return changetype<AddShipTypeCall_newShipTypeStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddShipTypeCall__Outputs {
  _call: AddShipTypeCall;

  constructor(call: AddShipTypeCall) {
    this._call = call;
  }
}

export class AddShipTypeCall_newShipTypeStruct extends ethereum.Tuple {
  get shipType(): BigInt {
    return this[0].toBigInt();
  }

  get price(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get attack(): BigInt {
    return this[2].toBigInt();
  }

  get attackTypes(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get defenseTypes(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get health(): BigInt {
    return this[5].toBigInt();
  }

  get cargo(): BigInt {
    return this[6].toBigInt();
  }

  get craftTime(): BigInt {
    return this[7].toBigInt();
  }

  get craftedFrom(): BigInt {
    return this[8].toBigInt();
  }

  get name(): string {
    return this[9].toString();
  }

  get moduleSlots(): BigInt {
    return this[10].toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AssignShipToPlanetCall extends ethereum.Call {
  get inputs(): AssignShipToPlanetCall__Inputs {
    return new AssignShipToPlanetCall__Inputs(this);
  }

  get outputs(): AssignShipToPlanetCall__Outputs {
    return new AssignShipToPlanetCall__Outputs(this);
  }
}

export class AssignShipToPlanetCall__Inputs {
  _call: AssignShipToPlanetCall;

  constructor(call: AssignShipToPlanetCall) {
    this._call = call;
  }

  get _shipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _toPlanetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AssignShipToPlanetCall__Outputs {
  _call: AssignShipToPlanetCall;

  constructor(call: AssignShipToPlanetCall) {
    this._call = call;
  }
}

export class BurnShipCall extends ethereum.Call {
  get inputs(): BurnShipCall__Inputs {
    return new BurnShipCall__Inputs(this);
  }

  get outputs(): BurnShipCall__Outputs {
    return new BurnShipCall__Outputs(this);
  }
}

export class BurnShipCall__Inputs {
  _call: BurnShipCall;

  constructor(call: BurnShipCall) {
    this._call = call;
  }

  get _shipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnShipCall__Outputs {
  _call: BurnShipCall;

  constructor(call: BurnShipCall) {
    this._call = call;
  }
}

export class DeleteShipFromPlanetCall extends ethereum.Call {
  get inputs(): DeleteShipFromPlanetCall__Inputs {
    return new DeleteShipFromPlanetCall__Inputs(this);
  }

  get outputs(): DeleteShipFromPlanetCall__Outputs {
    return new DeleteShipFromPlanetCall__Outputs(this);
  }
}

export class DeleteShipFromPlanetCall__Inputs {
  _call: DeleteShipFromPlanetCall;

  constructor(call: DeleteShipFromPlanetCall) {
    this._call = call;
  }

  get _shipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteShipFromPlanetCall__Outputs {
  _call: DeleteShipFromPlanetCall;

  constructor(call: DeleteShipFromPlanetCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _gameDiamond(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shipTypeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _gameDiamond(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetUriCall extends ethereum.Call {
  get inputs(): SetUriCall__Inputs {
    return new SetUriCall__Inputs(this);
  }

  get outputs(): SetUriCall__Outputs {
    return new SetUriCall__Outputs(this);
  }
}

export class SetUriCall__Inputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }

  get __uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetUriCall__Outputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
