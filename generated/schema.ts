// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get faction(): BigInt {
    let value = this.get("faction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set faction(value: BigInt) {
    this.set("faction", Value.fromBigInt(value));
  }

  get planets(): PlanetLoader {
    return new PlanetLoader("Player", this.get("id")!.toString(), "planets");
  }
}

export class Planet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Planet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Planet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Planet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Planet | null {
    return changetype<Planet | null>(store.get_in_block("Planet", id));
  }

  static load(id: string): Planet | null {
    return changetype<Planet | null>(store.get("Planet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get planetType(): i32 {
    let value = this.get("planetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set planetType(value: i32) {
    this.set("planetType", Value.fromI32(value));
  }

  get planetResourcesUnmined(): string {
    let value = this.get("planetResourcesUnmined");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set planetResourcesUnmined(value: string) {
    this.set("planetResourcesUnmined", Value.fromString(value));
  }

  get planetResourcesAvailable(): string {
    let value = this.get("planetResourcesAvailable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set planetResourcesAvailable(value: string) {
    this.set("planetResourcesAvailable", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get pvpEnabled(): boolean {
    let value = this.get("pvpEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set pvpEnabled(value: boolean) {
    this.set("pvpEnabled", Value.fromBoolean(value));
  }
}

export class PlanetResource extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlanetResource entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlanetResource must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlanetResource", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PlanetResource | null {
    return changetype<PlanetResource | null>(
      store.get_in_block("PlanetResource", id)
    );
  }

  static load(id: string): PlanetResource | null {
    return changetype<PlanetResource | null>(store.get("PlanetResource", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get antimatter(): BigInt {
    let value = this.get("antimatter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set antimatter(value: BigInt) {
    this.set("antimatter", Value.fromBigInt(value));
  }

  get metal(): BigInt {
    let value = this.get("metal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set metal(value: BigInt) {
    this.set("metal", Value.fromBigInt(value));
  }

  get crystal(): BigInt {
    let value = this.get("crystal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crystal(value: BigInt) {
    this.set("crystal", Value.fromBigInt(value));
  }
}

export class PlanetResourceAvailable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PlanetResourceAvailable entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlanetResourceAvailable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlanetResourceAvailable", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PlanetResourceAvailable | null {
    return changetype<PlanetResourceAvailable | null>(
      store.get_in_block("PlanetResourceAvailable", id)
    );
  }

  static load(id: string): PlanetResourceAvailable | null {
    return changetype<PlanetResourceAvailable | null>(
      store.get("PlanetResourceAvailable", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get antimatter(): BigInt {
    let value = this.get("antimatter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set antimatter(value: BigInt) {
    this.set("antimatter", Value.fromBigInt(value));
  }

  get metal(): BigInt {
    let value = this.get("metal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set metal(value: BigInt) {
    this.set("metal", Value.fromBigInt(value));
  }

  get crystal(): BigInt {
    let value = this.get("crystal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crystal(value: BigInt) {
    this.set("crystal", Value.fromBigInt(value));
  }
}

export class PlanetLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Planet[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Planet[]>(value);
  }
}
